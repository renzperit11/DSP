# -*- coding: utf-8 -*-
"""signal_generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10rU6CXBEN_RS4O9uykQk36ovSk1BOaaF
"""

import numpy as np
import matplotlib.pyplot as plt


def unit_sample(n0, n_min, n_max):

    n = np.arange(n_min, n_max + 1, 1)

    delta = np.zeros(len(n))

    delta[n == n0] = 1
    return n, delta


n0 = 3
n_min = -10
n_max = 10


n, delta = unit_sample(n0, n_min, n_max)


plt.stem(n, delta, use_line_collection=True)
plt.title(f'Unit Sample Sequence (Impulse at n = {n0})')
plt.xlabel('n')
plt.ylabel('delta[n]')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt


def unit_step(n0, n_min, n_max, amplitude=1):

    n = np.arange(n_min, n_max + 1, 1)

    step = np.zeros(len(n))

    step[n >= n0] = amplitude
    return n, step


n0 = 5
n_min = -10
n_max = 10
amplitude = 2


n, step = unit_step(n0, n_min, n_max, amplitude)


plt.stem(n, step, use_line_collection=True)
plt.title(f'Unit Step Signal (Step at n = {n0}, Amplitude = {amplitude})')
plt.xlabel('n')
plt.ylabel('u[n]')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt


def unit_ramp(n_min, n_max, slope=1, n0=0):

    n = np.arange(n_min, n_max + 1, 1)

    ramp = np.where(n >= n0, slope * (n - n0), 0)
    return n, ramp


n_min = -10
n_max = 10
slope = 2
n0 = -3


n, ramp = unit_ramp(n_min, n_max, slope, n0)


plt.stem(n, ramp, use_line_collection=True)
plt.title(f'Custom Unit Ramp Signal (Slope = {slope}, Start at n = {n0})')
plt.xlabel('n')
plt.ylabel('r[n]')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt


def exponential_signal(n_min, n_max, A=1, alpha=0.5, n0=0):

    n = np.arange(n_min, n_max + 1, 1)

    x = A * np.exp(alpha * (n - n0))
    return n, x


n_min = -10
n_max = 10
A = 2
alpha = -0.2
n0 = -5


n, x = exponential_signal(n_min, n_max, A, alpha, n0)


plt.stem(n, x, use_line_collection=True)
plt.title(f'Custom Exponential Signal (A={A}, Î±={alpha}, Shift at n = {n0})')
plt.xlabel('n')
plt.ylabel('x[n]')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

def square_wave(n_min, n_max, frequency=1, duty_cycle=0.5):

    n = np.arange(n_min, n_max + 1, 1)


    square_wave = signal.square(2 * np.pi * frequency * n, duty=duty_cycle)
    return n, square_wave


n_min = -10
n_max = 10
frequency = 0.2
duty_cycle = 0.5


n, sq_wave = square_wave(n_min, n_max, frequency, duty_cycle)

plt.stem(n, sq_wave, use_line_collection=True)
plt.title(f'Square Wave Signal (Frequency = {frequency}, Duty Cycle = {duty_cycle * 100}%)')
plt.xlabel('n')
plt.ylabel('Amplitude')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

def triangular_wave(n_min, n_max, frequency=1):

    n = np.arange(n_min, n_max + 1, 1)

    tri_wave = signal.sawtooth(2 * np.pi * frequency * n, width=0.5)
    return n, tri_wave

n_min = -10
n_max = 10
frequency = 0.1

n, tri_wave = triangular_wave(n_min, n_max, frequency)

plt.stem(n, tri_wave, use_line_collection=True)
plt.title(f'Triangular Wave Signal (Frequency = {frequency})')
plt.xlabel('n')
plt.ylabel('Amplitude')
plt.grid(True)
plt.show()